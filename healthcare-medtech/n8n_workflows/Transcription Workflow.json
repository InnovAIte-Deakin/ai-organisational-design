{
  "name": "Transcription Workflow",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "record_id",
              "type": "number"
            },
            {
              "name": "transcription"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        112,
        0
      ],
      "id": "648acc90-030f-4677-bca8-d93dcc74daec",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "model": "gpt-oss:20b",
        "options": {
          "temperature": 0.6,
          "numCtx": 8192
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        1168,
        208
      ],
      "id": "3961d481-883b-415d-9588-5f4587fcc3aa",
      "name": "Ollama Chat Model",
      "credentials": {
        "ollamaApi": {
          "id": "Hpr0lcAPg9nDMfpz",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return {\n  \"individual_id\": $input.first().json.record_id,\n  \"transcription\": $input.first().json.transcription \n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        288,
        0
      ],
      "id": "4dcb129e-5a92-491e-86ec-05d1d944fd2c",
      "name": "Combine to Structured"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst stringifiedItems = JSON.stringify(items.map((item) => item.json));\nreturn { result: stringifiedItems };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        0
      ],
      "id": "79ae087d-25c4-42fc-8289-7e384b1a49db",
      "name": "Stringify"
    },
    {
      "parameters": {
        "type": "SHA256",
        "value": "={{ $json.result }}"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        560,
        0
      ],
      "id": "6596f503-db2b-4995-ac90-c60115fbe11e",
      "name": "Hashing"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6b01db05-8bdc-4e62-bfca-ec3364564292",
              "name": "Summaries Version",
              "value": 2,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        704,
        0
      ],
      "id": "175e9dab-cad5-4bf3-911c-240695f98508",
      "name": "Summary Versioning",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a clinical transcription assistant. Using the following data:  \n\n{{ $('Stringify').item.json.result }}  \n\nGenerate structured **dentistry SOAP notes** from this transcription, ignoring any unrelated conversation or non-clinical remarks.  \n\n1. **Subjective (S)**  \n   - Summarize the patientâ€™s reported concerns, symptoms, or reasons for the visit.  \n   - Capture any patient-reported history relevant to dental care.  \n\n2. **Objective (O)**  \n   - Record clinical findings from the exam (e.g., oral health status, periodontal condition, caries, restorations, occlusion).  \n   - Note diagnostic tests or imaging results if mentioned.  \n\n3. **Assessment (A)**  \n   - Provide the professional interpretation of findings.  \n   - Include diagnoses, recurring conditions, and comparisons to previous visits.  \n\n4. **Plan (P)**  \n   - Detail treatments performed during the appointment.  \n   - Document follow-up needs, preventive advice, and next scheduled procedures.  \n\nFormat the output for **professional clinical documentation** in a dental practice, ensuring clarity, conciseness, and clinical relevance.  ",
        "hasOutputParser": true,
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1168,
        64
      ],
      "id": "91db6135-45b6-48b3-95c3-f1bda70ef589",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"s\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"o\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"a\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"p\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1312,
        208
      ],
      "id": "8b2464bd-c108-4300-80fa-4c1345fe38e6",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "Transcriptions",
        "filters": {
          "conditions": [
            {
              "keyName": "hash",
              "keyValue": "={{ $('Hashing').item.json.data }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        848,
        0
      ],
      "id": "72510dcb-c2fa-4185-8515-df5377a27679",
      "name": "Get Transcription If Made",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "c9Xf435KYATiW6Y3",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b006841d-31ce-4341-9e7c-a4e7f02faa08",
              "leftValue": "={{ $items(\"Get Transcription If Made\")[0].json.isEmpty() }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        992,
        0
      ],
      "id": "74bbaceb-e897-4412-a875-5d8bcf7e7293",
      "name": "Check if Transcription Notes Are Already Made"
    },
    {
      "parameters": {
        "tableId": "Transcriptions",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "hash",
              "fieldValue": "={{ $('Hashing').item.json.data }}"
            },
            {
              "fieldId": "individual_id",
              "fieldValue": "={{ $('Combine to Structured').item.json.individual_id }}"
            },
            {
              "fieldId": "text",
              "fieldValue": "={{ $json.output.toJsonString() }}"
            },
            {
              "fieldId": "version",
              "fieldValue": "={{ $('Summary Versioning').item.json['Summaries Version'] }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1456,
        64
      ],
      "id": "c841b9c4-abc9-4e60-b3e1-46eb47676672",
      "name": "Store Transcription Output",
      "credentials": {
        "supabaseApi": {
          "id": "c9Xf435KYATiW6Y3",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "bb7c8649-8e12-4e30-aef4-7f402052afcc",
              "name": "output",
              "value": "={{ $('Basic LLM Chain').item.json.output }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1664,
        64
      ],
      "id": "667bacfa-cd88-4919-8c6f-0a7795f4c490",
      "name": "Edit Fields",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const obj = JSON.parse($input.first().json.text);\nreturn [{\"output\": obj}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        -128
      ],
      "id": "cce8bc16-abae-4310-a63a-0387aa4c19b4",
      "name": "Code in JavaScript"
    }
  ],
  "pinData": {
    "When Executed by Another Workflow": [
      {
        "json": {
          "record_id": 1,
          "transcription": "For this appointment we'll check yuor teeth, we'll check how clean they are, check for cavities, and such and we'll see if we need to proceed with anything else like removing them, maybe giving you some toothpaste products to help clean them as well.."
        }
      }
    ]
  },
  "connections": {
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Combine to Structured",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ollama Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Combine to Structured": {
      "main": [
        [
          {
            "node": "Stringify",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Stringify": {
      "main": [
        [
          {
            "node": "Hashing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Hashing": {
      "main": [
        [
          {
            "node": "Summary Versioning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summary Versioning": {
      "main": [
        [
          {
            "node": "Get Transcription If Made",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Store Transcription Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Get Transcription If Made": {
      "main": [
        [
          {
            "node": "Check if Transcription Notes Are Already Made",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check if Transcription Notes Are Already Made": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store Transcription Output": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9a939001-7e21-4f5d-806e-cb5c96584172",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "f54075985bfbaffe95d885847570f3c0fe24a84f90486b50e9cf38ee57c98470"
  },
  "id": "u3qc23BlEzootpmT",
  "tags": []
}